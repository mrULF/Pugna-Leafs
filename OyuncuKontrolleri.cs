//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input System/OyuncuKontrolleri.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @OyuncuKontrolleri: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @OyuncuKontrolleri()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""OyuncuKontrolleri"",
    ""maps"": [
        {
            ""name"": ""Oyuncu Hareketleri"",
            ""id"": ""71d6e042-0227-4249-86e6-de2ad684d071"",
            ""actions"": [
                {
                    ""name"": ""Hareket"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9d785266-016e-44ab-8f59-fb204b70c071"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8c4d7b03-5b1c-439f-8a7c-521068524e2d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""65f1a7c8-7bfc-44ab-b226-bfc2a6e220b0"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6bc911b2-2336-4b68-87ea-28587a3b711d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""547671ad-1c79-4fb2-93bf-b7fd0601f83e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e080a4f9-1c8c-4ac5-abbb-64e94d51a3b6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ac6e2da0-d075-4867-afed-00eb414c17f5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""2f165adf-187e-443b-bade-009dc6b16b7a"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""48b3fb80-21e5-4239-864d-556656fdf120"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e0af4053-d43e-4f6b-9830-6a967a91a17d"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dcc64f4a-505f-4ad5-b42a-f08aa16fd0d5"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""945b9130-e92c-4741-a1ef-1363f5e6985b"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hareket"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f12bf46b-96fc-40a3-a786-0c845f4e5224"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Right  Stick"",
                    ""id"": ""d11dd670-dc15-4e33-81ba-72b181c8dbe0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6cdb99c5-3af1-49d1-9b85-c80c18301712"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""438ca06b-18a8-4687-9e2d-80c13490386e"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c60f6b21-ad9d-4fd5-b007-945abba4db6f"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9c47939b-e0c2-45c5-b02c-da29656b4d7a"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Oyuncu AksiyonlarÄ±"",
            ""id"": ""659902f0-c368-481e-b8cb-c3ce4fdb0cea"",
            ""actions"": [
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""f289a5b6-9d31-4858-a333-4b9ca152461c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""cae74b76-3757-4d3a-81c5-3f86ac47d9c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a24cdc7-ac1e-4770-98a3-285ea791bf95"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d600d7d-20b6-4bee-8d7c-60e3bd18f9bb"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf8abffa-63e1-4b0c-a8a5-0921b2e89e74"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""053b9abe-cc29-4c1f-b4f0-f1b8e8e5f99d"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Oyuncu Hareketleri
        m_OyuncuHareketleri = asset.FindActionMap("Oyuncu Hareketleri", throwIfNotFound: true);
        m_OyuncuHareketleri_Hareket = m_OyuncuHareketleri.FindAction("Hareket", throwIfNotFound: true);
        m_OyuncuHareketleri_MouseLook = m_OyuncuHareketleri.FindAction("MouseLook", throwIfNotFound: true);
        // Oyuncu AksiyonlarÄ±
        m_OyuncuAksiyonlarÄ± = asset.FindActionMap("Oyuncu AksiyonlarÄ±", throwIfNotFound: true);
        m_OyuncuAksiyonlarÄ±_B = m_OyuncuAksiyonlarÄ±.FindAction("B", throwIfNotFound: true);
        m_OyuncuAksiyonlarÄ±_Jump = m_OyuncuAksiyonlarÄ±.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Oyuncu Hareketleri
    private readonly InputActionMap m_OyuncuHareketleri;
    private List<IOyuncuHareketleriActions> m_OyuncuHareketleriActionsCallbackInterfaces = new List<IOyuncuHareketleriActions>();
    private readonly InputAction m_OyuncuHareketleri_Hareket;
    private readonly InputAction m_OyuncuHareketleri_MouseLook;
    public struct OyuncuHareketleriActions
    {
        private @OyuncuKontrolleri m_Wrapper;
        public OyuncuHareketleriActions(@OyuncuKontrolleri wrapper) { m_Wrapper = wrapper; }
        public InputAction @Hareket => m_Wrapper.m_OyuncuHareketleri_Hareket;
        public InputAction @MouseLook => m_Wrapper.m_OyuncuHareketleri_MouseLook;
        public InputActionMap Get() { return m_Wrapper.m_OyuncuHareketleri; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OyuncuHareketleriActions set) { return set.Get(); }
        public void AddCallbacks(IOyuncuHareketleriActions instance)
        {
            if (instance == null || m_Wrapper.m_OyuncuHareketleriActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OyuncuHareketleriActionsCallbackInterfaces.Add(instance);
            @Hareket.started += instance.OnHareket;
            @Hareket.performed += instance.OnHareket;
            @Hareket.canceled += instance.OnHareket;
            @MouseLook.started += instance.OnMouseLook;
            @MouseLook.performed += instance.OnMouseLook;
            @MouseLook.canceled += instance.OnMouseLook;
        }

        private void UnregisterCallbacks(IOyuncuHareketleriActions instance)
        {
            @Hareket.started -= instance.OnHareket;
            @Hareket.performed -= instance.OnHareket;
            @Hareket.canceled -= instance.OnHareket;
            @MouseLook.started -= instance.OnMouseLook;
            @MouseLook.performed -= instance.OnMouseLook;
            @MouseLook.canceled -= instance.OnMouseLook;
        }

        public void RemoveCallbacks(IOyuncuHareketleriActions instance)
        {
            if (m_Wrapper.m_OyuncuHareketleriActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOyuncuHareketleriActions instance)
        {
            foreach (var item in m_Wrapper.m_OyuncuHareketleriActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OyuncuHareketleriActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OyuncuHareketleriActions @OyuncuHareketleri => new OyuncuHareketleriActions(this);

    // Oyuncu AksiyonlarÄ±
    private readonly InputActionMap m_OyuncuAksiyonlarÄ±;
    private List<IOyuncuAksiyonlarÄ±Actions> m_OyuncuAksiyonlarÄ±ActionsCallbackInterfaces = new List<IOyuncuAksiyonlarÄ±Actions>();
    private readonly InputAction m_OyuncuAksiyonlarÄ±_B;
    private readonly InputAction m_OyuncuAksiyonlarÄ±_Jump;
    public struct OyuncuAksiyonlarÄ±Actions
    {
        private @OyuncuKontrolleri m_Wrapper;
        public OyuncuAksiyonlarÄ±Actions(@OyuncuKontrolleri wrapper) { m_Wrapper = wrapper; }
        public InputAction @B => m_Wrapper.m_OyuncuAksiyonlarÄ±_B;
        public InputAction @Jump => m_Wrapper.m_OyuncuAksiyonlarÄ±_Jump;
        public InputActionMap Get() { return m_Wrapper.m_OyuncuAksiyonlarÄ±; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OyuncuAksiyonlarÄ±Actions set) { return set.Get(); }
        public void AddCallbacks(IOyuncuAksiyonlarÄ±Actions instance)
        {
            if (instance == null || m_Wrapper.m_OyuncuAksiyonlarÄ±ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OyuncuAksiyonlarÄ±ActionsCallbackInterfaces.Add(instance);
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IOyuncuAksiyonlarÄ±Actions instance)
        {
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IOyuncuAksiyonlarÄ±Actions instance)
        {
            if (m_Wrapper.m_OyuncuAksiyonlarÄ±ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOyuncuAksiyonlarÄ±Actions instance)
        {
            foreach (var item in m_Wrapper.m_OyuncuAksiyonlarÄ±ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OyuncuAksiyonlarÄ±ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OyuncuAksiyonlarÄ±Actions @OyuncuAksiyonlarÄ± => new OyuncuAksiyonlarÄ±Actions(this);
    public interface IOyuncuHareketleriActions
    {
        void OnHareket(InputAction.CallbackContext context);
        void OnMouseLook(InputAction.CallbackContext context);
    }
    public interface IOyuncuAksiyonlarÄ±Actions
    {
        void OnB(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
